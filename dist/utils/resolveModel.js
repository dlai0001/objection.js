function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var path=require('path');var _require=require('../utils/objectUtils'),once=_require.once,isString=_require.isString;var _require2=require('../utils/classUtils'),isSubclassOf=_require2.isSubclassOf;var getModel=once(function(){return require('../model/Model');});var ResolveError=function(_Error){_inherits(ResolveError,_Error);function ResolveError(){_classCallCheck(this,ResolveError);return _possibleConstructorReturn(this,(ResolveError.__proto__||Object.getPrototypeOf(ResolveError)).apply(this,arguments));}return ResolveError;}(Error);function resolveModel(modelRef,modelPaths,errorPrefix){try{if(isString(modelRef)){if(isAbsolutePath(modelRef)){return requireModel(modelRef);}else if(modelPaths){return requireUsingModelPaths(modelRef,modelPaths);}}else{if(!isSubclassOf(modelRef,getModel())){throw new ResolveError('is not a subclass of Model or a file path to a module that exports one. You may be dealing with a require loop. See the documentation section about require loops.');}return modelRef;}}catch(err){if(err instanceof ResolveError){throw new Error(errorPrefix+': '+err.message);}else{throw err;}}}function requireUsingModelPaths(modelRef,modelPaths){var firstError=null;for(var _iterator=modelPaths,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[typeof Symbol==='function'?Symbol.iterator:'@@iterator']();;){var _ref;if(_isArray){if(_i>=_iterator.length)break;_ref=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref=_i.value;}var modelPath=_ref;try{return requireModel(path.join(modelPath,modelRef));}catch(err){if(firstError===null){firstError=err;}}}if(firstError){throw firstError;}else{throw new ResolveError('could not resolve '+modelRef+' using modelPaths');}}function requireModel(modelPath){var Model=getModel();var mod=require(''+path.resolve(modelPath));var modelClass=null;if(isSubclassOf(mod,Model)){modelClass=mod;}else if(isSubclassOf(mod.default,Model)){modelClass=mod.default;}else{Object.keys(mod).forEach(function(exportName){var exp=mod[exportName];if(isSubclassOf(exp,Model)){if(modelClass!==null){throw new ResolveError('path '+modelPath+' exports multiple models. Don\'t know which one to choose.');}modelClass=exp;}});}if(!isSubclassOf(modelClass,Model)){throw new ResolveError(modelPath+' is an invalid file path to a model class');}return modelClass;}function isAbsolutePath(pth){return path.normalize(pth+'/')===path.normalize(path.resolve(pth)+'/');}module.exports={resolveModel:resolveModel};