var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var normalizeIds=require('../../../utils/normalizeIds');var RelateOperation=require('../../../queryBuilder/operations/RelateOperation');var ManyToManyRelateOperation=function(_RelateOperation){_inherits(ManyToManyRelateOperation,_RelateOperation);function ManyToManyRelateOperation(){_classCallCheck(this,ManyToManyRelateOperation);return _possibleConstructorReturn(this,(ManyToManyRelateOperation.__proto__||Object.getPrototypeOf(ManyToManyRelateOperation)).apply(this,arguments));}_createClass(ManyToManyRelateOperation,[{key:'onAdd',value:function onAdd(builder,args){this.input=args[0];this.ids=normalizeIds(args[0],this.relation.relatedProp);return true;}},{key:'queryExecutor',value:function queryExecutor(builder){var _this2=this;var ownerId=this.relation.ownerProp.getProps(this.owner);var joinModels=this.relation.createJoinModels(ownerId,this.ids);var joinModelClass=this.relation.getJoinModelClass(builder.knex());for(var i=0,l=joinModels.length;i<l;++i){joinModels[i]=joinModelClass.fromJson(joinModels[i]);}return joinModelClass.query().childQueryOf(builder).runBefore(function(result,builder){return _this2.relation.executeJoinTableBeforeInsert(joinModels,builder.context(),null);}).insert(joinModels).copyFrom(builder,/returning/).runAfter(function(models){if(Array.isArray(_this2.input)){return models;}else{return models[0];}});}}]);return ManyToManyRelateOperation;}(RelateOperation);module.exports=ManyToManyRelateOperation;