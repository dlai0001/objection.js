var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var UpsertNode=require('./UpsertNode');var _require=require('../../utils/knexUtils'),isSqlite=_require.isSqlite;var _require2=require('../../utils/objectUtils'),asArray=_require2.asArray;var _require3=require('../../model/modelUtils'),keyByProps=_require3.keyByProps;var _require4=require('../../utils/dataPath'),appendDataPath=_require4.appendDataPath;var _require5=require('../../model/ValidationError'),ValidationErrorType=_require5.Type;var _require6=require('../RelationExpression'),RelationExpression=_require6.RelationExpression;var UpsertGraph=function(){function UpsertGraph(upsert,isArray,opt){_classCallCheck(this,UpsertGraph);this.upsert=upsert;this.isArray=isArray;this.rootModelClass=this.upsert[0].constructor;this.relExpr=RelationExpression.fromModelGraph(upsert);this.nodes=[];this.nodesByUpsert=new Map();this.opt=opt||{};}_createClass(UpsertGraph,[{key:'build',value:function build(builder){var _this=this;return this.fetchCurrentState(builder).then(function(currentState){return _this.buildGraph(currentState);});}},{key:'fetchCurrentState',value:function fetchCurrentState(builder){var rootIds=getRootIds(this.upsert);var rootIdCols=builder.fullIdColumnFor(this.rootModelClass);var allowedExpr=builder.allowedUpsertExpression();var oldContext=builder.context();if(allowedExpr&&!allowedExpr.isSubExpression(this.relExpr)){var modelClass=builder.modelClass();throw modelClass.createValidationError({type:ValidationErrorType.UnallowedRelation,message:'trying to upsert an unallowed relation'});}if(rootIds.length===0){return Promise.resolve([]);}return builder.modelClass().query().modify(function(fetchBuilder){var _arr=['forUpdate','forShare'];for(var _i=0;_i<_arr.length;_i++){var method=_arr[_i];if(builder.has(method)){fetchBuilder[method]();}}}).childQueryOf(builder,{fork:true,isInternalQuery:true}).whereInComposite(rootIdCols,rootIds).eager(this.relExpr).internalOptions({keepImplicitJoinProps:true}).mergeContext({onBuild:function onBuild(builder){if(oldContext.onBuild){oldContext.onBuild(builder);}var modelClass=builder.modelClass();var idColumn=builder.fullIdColumnFor(modelClass);builder.select(idColumn);}});}},{key:'buildGraph',value:function buildGraph(current){this.doBuildGraph({modelClass:this.rootModelClass,upsert:this.upsert,current:current,isArray:this.isArray,parentNode:null,relExpr:this.relExpr,dataPath:null});}},{key:'doBuildGraph',value:function doBuildGraph(_ref){var modelClass=_ref.modelClass,upsert=_ref.upsert,current=_ref.current,isArray=_ref.isArray,parentNode=_ref.parentNode,relExpr=_ref.relExpr,dataPath=_ref.dataPath;this.buildGraphArray({modelClass:modelClass,upsert:ensureArray(upsert),current:ensureArray(current),isArray:isArray,parentNode:parentNode,relExpr:relExpr,dataPath:dataPath});}},{key:'buildGraphArray',value:function buildGraphArray(_ref2){var _this2=this;var modelClass=_ref2.modelClass,upsert=_ref2.upsert,current=_ref2.current,isArray=_ref2.isArray,parentNode=_ref2.parentNode,relExpr=_ref2.relExpr,dataPath=_ref2.dataPath;var idProp=modelClass.getIdPropertyArray();var currentById=keyByProps(current,idProp);var upsertById=keyByProps(upsert,idProp);upsert.forEach(function(upsert,index){var key=upsert.$propKey(idProp);var current=currentById.get(key);var nextDataPath=isArray?appendDataPath(dataPath,index):dataPath;_this2.buildGraphSingle({modelClass:modelClass,upsert:upsert,current:current,parentNode:parentNode,relExpr:relExpr,dataPath:nextDataPath});});current.forEach(function(current){var key=current.$propKey(idProp);var upsert=upsertById.get(key);if(!upsert){var nextDataPath=isArray?appendDataPath(dataPath,-1):dataPath;_this2.buildGraphSingle({modelClass:modelClass,upsert:upsert,current:current,parentNode:parentNode,relExpr:relExpr,dataPath:nextDataPath});}});}},{key:'buildGraphSingle',value:function buildGraphSingle(_ref3){var _this3=this;var modelClass=_ref3.modelClass,upsert=_ref3.upsert,current=_ref3.current,parentNode=_ref3.parentNode,relExpr=_ref3.relExpr,dataPath=_ref3.dataPath;if(!upsert&&!current){return;}var node=new UpsertNode({parentNode:parentNode,relExpr:relExpr,upsertModel:upsert,currentModel:current,dataPath:dataPath,opt:this.opt});this.nodes.push(node);if(upsert){this.nodesByUpsert.set(upsert,node);}if(parentNode){var relations=parentNode.relations;var relation=relations[relExpr.$relation]=relations[relExpr.$relation]||[];relation.push(node);}if(node.upsertModel===null){return;}if(node.hasType(UpsertNode.Type.UpsertRecursively)){return;}relExpr.forEachChildExpression(modelClass.getRelations(),function(expr,relation){var relUpsert=upsert&&upsert[relation.name];var relCurrent=current&&current[relation.name];var nextDataPath=appendDataPath(dataPath,relation);_this3.doBuildGraph({modelClass:relation.relatedModelClass,upsert:relUpsert,current:relCurrent,isArray:Array.isArray(relUpsert),parentNode:node,relExpr:expr,dataPath:nextDataPath});});}}]);return UpsertGraph;}();function getRootIds(graph){return asArray(graph).filter(function(it){return it.$hasId();}).map(function(root){return root.$id();});}function ensureArray(item){if(item&&!Array.isArray(item)){return[item];}else if(!item){return[];}else{return item;}}module.exports=UpsertGraph;