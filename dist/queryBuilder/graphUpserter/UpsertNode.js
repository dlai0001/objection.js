var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var _require=require('../../utils/objectUtils'),difference=_require.difference;var _require2=require('../../utils/tmpColumnUtils'),isTempColumn=_require2.isTempColumn;var BelongsToOneRelation=require('../../relations/belongsToOne/BelongsToOneRelation');var UpsertNodeType=Object.freeze({Insert:'Insert',Delete:'Delete',Update:'Update',Patch:'Patch',Relate:'Relate',Unrelate:'Unrelate',UpsertRecursively:'UpsertRecursively',None:'None'});var ChangeType=Object.freeze({HasOwnChanges:'HasOwnChanges',HasRelationalChanges:'HasRelationalChanges',NoChanges:'NoChanges'});var OptionType=Object.freeze({Relate:'relate',Unrelate:'unrelate',InsertMissing:'insertMissing',Update:'update',NoInsert:'noInsert',NoUpdate:'noUpdate',NoDelete:'noDelete',NoRelate:'noRelate',NoUnrelate:'noUnrelate'});var UpsertNode=function(){function UpsertNode(_ref){var parentNode=_ref.parentNode,relExpr=_ref.relExpr,upsertModel=_ref.upsertModel,currentModel=_ref.currentModel,dataPath=_ref.dataPath,opt=_ref.opt;_classCallCheck(this,UpsertNode);this.parentNode=parentNode||null;this.relExpr=relExpr;this.relPathFromRoot=getRelationPathFromRoot(this);this.upsertModel=upsertModel||null;this.currentModel=currentModel||null;this.relations=Object.create(null);this.dataPath=dataPath;this.opt=opt||{};var _getTypes=getTypes(this),types=_getTypes.types,omitFromUpdate=_getTypes.omitFromUpdate;this.types=types;if(upsertModel&&currentModel){copyCurrentToUpsert(currentModel,upsertModel);}if(omitFromUpdate){this.upsertModel.$omitFromDatabaseJson(omitFromUpdate);}}_createClass(UpsertNode,[{key:'hasType',value:function hasType(){for(var i=0,l=arguments.length;i<l;++i){if(this.types.indexOf(arguments[i])!==-1){return true;}}return false;}},{key:'someModel',get:function get(){return this.upsertModel||this.currentModel;}},{key:'modelClass',get:function get(){return this.someModel.constructor;}},{key:'relationName',get:function get(){if(this.parentNode!==null){return this.relExpr.$relation;}else{return null;}}},{key:'relation',get:function get(){if(this.parentNode!==null){return this.parentNode.modelClass.getRelations()[this.relationName];}else{return null;}}}],[{key:'Type',get:function get(){return UpsertNodeType;}},{key:'OptionType',get:function get(){return OptionType;}}]);return UpsertNode;}();function copyCurrentToUpsert(currentModel,upsertModel){var props=Object.keys(currentModel);for(var i=0,l=props.length;i<l;++i){var prop=props[i];if(!isTempColumn(prop)&&upsertModel[prop]===undefined){upsertModel[prop]=currentModel[prop];}}}function getTypes(node){if(isInsertWithId(node)){return getTypesInsertWithId(node);}else if(isInsert(node)){return getTypesInsert(node);}else if(isDeleteOrUnrelate(node)){return getTypesDeleteUnrelate(node);}else{return getTypesUpdate(node);}}function isInsertWithId(node){return isInsert(node)&&node.upsertModel.$hasId();}function getTypesInsertWithId(node){if(hasOption(node,OptionType.Relate)&&node.relation!==null){return getTypesRelate(node);}else if(hasOption(node,OptionType.InsertMissing)){return getTypesInsert(node);}else{var parent=node.parentNode;throw new Error([parent?'model (id='+node.upsertModel.$id()+') is not a child of model (id='+parent.upsertModel.$id()+'). ':'root model (id='+node.upsertModel.$id()+') does not exist. ',parent?'If you want to relate it, use the relate option. ':'','If you want to insert it with an id, use the insertMissing option'].join(''));}}function getTypesRelate(node){var props=Object.keys(node.upsertModel);var rel=node.parentNode.modelClass.getRelations()[node.relationName];if(difference(props,rel.relatedProp.props).length!==0){var relateType=decideType(node,UpsertNodeType.Relate,OptionType.NoRelate);var possibleUpdateType=decideType(node,UpsertNodeType.Patch,OptionType.Update,UpsertNodeType.Update);var updateType=decideType(node,possibleUpdateType,OptionType.NoUpdate);if(relateType===UpsertNodeType.None){return{types:[UpsertNodeType.None]};}else if(updateType===UpsertNodeType.None){return{types:[relateType]};}else if(relateType===UpsertNodeType.Relate&&hasRelationsInUpsertModel(node.upsertModel)){return{types:[decideType(node,UpsertNodeType.Relate,OptionType.NoRelate),decideType(node,UpsertNodeType.UpsertRecursively,OptionType.NoRelate)]};}else{return{types:[relateType,updateType],omitFromUpdate:rel.relatedProp.props};}}else{return{types:[decideType(node,UpsertNodeType.Relate,OptionType.NoRelate)]};}}function isInsert(node){return node.upsertModel!==null&&node.currentModel===null;}function getTypesInsert(node){return{types:[decideType(node,UpsertNodeType.Insert,OptionType.NoInsert)]};}function isDeleteOrUnrelate(node){return node.upsertModel===null&&node.currentModel!==null;}function getTypesDeleteUnrelate(node){var ciblingNodes=node.parentNode.relations[node.relation.name];var type=hasOption(node,OptionType.Unrelate)?decideType(node,UpsertNodeType.Unrelate,OptionType.NoUnrelate):decideType(node,UpsertNodeType.Delete,OptionType.NoDelete);if(type===UpsertNodeType.Unrelate&&node.relation instanceof BelongsToOneRelation&&ciblingNodes&&ciblingNodes.some(function(it){return it.hasType(UpsertNodeType.Relate,UpsertNodeType.Insert);})){return{types:[UpsertNodeType.None]};}else{return{types:[type]};}}function getTypesUpdate(node){var _hasChanges=hasChanges(node.currentModel,node.upsertModel),changeType=_hasChanges.changeType,unchangedProps=_hasChanges.unchangedProps;if(changeType==ChangeType.NoChanges){return{types:[UpsertNodeType.None],omitFromUpdate:unchangedProps};}else if(changeType==ChangeType.HasOwnChanges){var possibleUpdateType=decideType(node,UpsertNodeType.Patch,OptionType.Update,UpsertNodeType.Update);var updateType=decideType(node,possibleUpdateType,OptionType.NoUpdate);return{types:[updateType],omitFromUpdate:unchangedProps};}else if(changeType==ChangeType.HasRelationalChanges){return{types:[UpsertNodeType.Patch],omitFromUpdate:unchangedProps};}}function hasOption(node,optName){var opt=node.opt[optName];if(Array.isArray(opt)){return opt.indexOf(node.relPathFromRoot)!==-1;}else{return!!opt;}}function decideType(node,defaultType,option){var optionType=arguments.length>3&&arguments[3]!==undefined?arguments[3]:UpsertNodeType.None;return hasOption(node,option)?optionType:defaultType;}function getRelationPathFromRoot(node){var path=[];while(node){if(node.relExpr.$relation){path.unshift(node.relExpr.$relation);}node=node.parentNode;}return path.join('.');}function hasChanges(currentModel,upsertModel){var changeType=ChangeType.NoChanges;var changingRelProps=findChangingRelProps(currentModel,upsertModel);if(changingRelProps.length){changeType=ChangeType.HasRelationalChanges;}if(changeType===ChangeType.NoChanges){if(upsertModel.$$queryProps&&Object.keys(upsertModel.$$queryProps).length>0){changeType=ChangeType.HasOwnChanges;}}var keys=Object.keys(upsertModel);var relations=upsertModel.constructor.getRelations();var unchangedProps=[];for(var i=0,l=keys.length;i<l;++i){var key=keys[i];if(key[0]==='$'||relations[key]){continue;}if(currentModel[key]===undefined||currentModel[key]!=upsertModel[key]){if(changeType===ChangeType.NoChanges){changeType=ChangeType.HasOwnChanges;}}else if(!changingRelProps.includes(key)){unchangedProps.push(key);}}return{changeType:changeType,unchangedProps:unchangedProps};}function hasRelationsInUpsertModel(upsertModel){var relationArray=upsertModel.constructor.getRelationArray();for(var i=0,l=relationArray.length;i<l;++i){var relation=relationArray[i];var upsertRelated=upsertModel[relation.name];if(upsertRelated){return true;}}return false;}function findChangingRelProps(currentModel,upsertModel){var relationArray=upsertModel.constructor.getRelationArray();var changingProps=[];for(var i=0,l=relationArray.length;i<l;++i){var relation=relationArray[i];var upsertRelated=upsertModel[relation.name];if(upsertRelated&&relation instanceof BelongsToOneRelation){var relatedProp=relation.relatedProp;var ownerProp=relation.ownerProp;var currentRelated=currentModel[relation.name];for(var j=0,lr=relatedProp.size;j<lr;++j){var currentProp=currentRelated&&relatedProp.getProp(currentRelated,j);var upsertProp=upsertRelated&&relatedProp.getProp(upsertRelated,j);if(currentProp!==upsertProp){changingProps.push(ownerProp.props[j]);}}}}return changingProps;}module.exports=UpsertNode;