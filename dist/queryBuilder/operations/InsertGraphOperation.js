var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var DelegateOperation=require('./DelegateOperation');var InsertOperation=require('./InsertOperation');var insertFuncBuilder=require('../graphInserter/inserter');var GraphInserter=require('../graphInserter/GraphInserter');var InsertGraphOperation=function(_DelegateOperation){_inherits(InsertGraphOperation,_DelegateOperation);function InsertGraphOperation(name,opt){_classCallCheck(this,InsertGraphOperation);var _this=_possibleConstructorReturn(this,(InsertGraphOperation.__proto__||Object.getPrototypeOf(InsertGraphOperation)).call(this,name,opt));if(!_this.delegate.is(InsertOperation)){throw new Error('Invalid delegate');}_this.delegate.modelOptions.skipValidation=true;_this.insertOpt=opt.opt||{};return _this;}_createClass(InsertGraphOperation,[{key:'onAdd',value:function onAdd(builder,args){var retVal=_get(InsertGraphOperation.prototype.__proto__||Object.getPrototypeOf(InsertGraphOperation.prototype),'onAdd',this).call(this,builder,args);builder.resolve([]);return retVal;}},{key:'onBefore1',value:function onBefore1(){}},{key:'onBefore2',value:function onBefore2(){}},{key:'onBefore3',value:function onBefore3(){}},{key:'onBuild',value:function onBuild(){}},{key:'onBuildKnex',value:function onBuildKnex(){}},{key:'beforeGraphInserterCreated',value:function beforeGraphInserterCreated(builder){}},{key:'afterGraphInserterCreated',value:function afterGraphInserterCreated(builder,graphInserter){}},{key:'onAfter1',value:function onAfter1(builder){var _this2=this;var modelClass=builder.modelClass();var insertFunc=insertFuncBuilder(builder);this.beforeGraphInserterCreated(builder);var graphInserter=new GraphInserter({modelClass:modelClass,models:this.models,allowedRelations:builder.allowedUpsertExpression(),queryContext:builder.context(),knex:builder.knex(),opt:this.insertOpt});graphInserter.buildDependencyGraph();this.afterGraphInserterCreated(builder,graphInserter);graphInserter.checkForCyclicReferences();return graphInserter.execute(insertFunc).then(function(){return _get(InsertGraphOperation.prototype.__proto__||Object.getPrototypeOf(InsertGraphOperation.prototype),'onAfter1',_this2).call(_this2,builder,_this2.models);});}},{key:'onAfter2',value:function onAfter2(){return this.isArray?this.models:this.models[0]||null;}},{key:'models',get:function get(){return this.delegate.models;}},{key:'isArray',get:function get(){return this.delegate.isArray;}}]);return InsertGraphOperation;}(DelegateOperation);module.exports=InsertGraphOperation;