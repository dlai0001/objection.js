var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var UpsertNode=require('../graphUpserter/UpsertNode');var UpsertGraph=require('../graphUpserter/UpsertGraph');var HasManyRelation=require('../../relations/hasMany/HasManyRelation');var InsertGraphOperation=require('./InsertGraphOperation');var transformOptionsFromPath=require('../../utils/transformOptionsFromPath');var promiseUtils=require('../../utils/promiseUtils');var UpsertGraphOperation=function(_InsertGraphOperation){_inherits(UpsertGraphOperation,_InsertGraphOperation);function UpsertGraphOperation(name,opt){_classCallCheck(this,UpsertGraphOperation);var _this=_possibleConstructorReturn(this,(UpsertGraphOperation.__proto__||Object.getPrototypeOf(UpsertGraphOperation)).call(this,name,_extends({},opt,{opt:{}})));_this.graph=null;_this.upsertOpt=opt.opt||{};return _this;}_createClass(UpsertGraphOperation,[{key:'onBefore1',value:function onBefore1(builder){var _this2=this;this.graph=new UpsertGraph(this.models,this.isArray,this.upsertOpt);return this.graph.build(builder).then(function(){return _this2.delete(builder);});}},{key:'beforeGraphInserterCreated',value:function beforeGraphInserterCreated(builder){for(var i=0,l=this.graph.nodes.length;i<l;++i){var node=this.graph.nodes[i];if(node.hasType(UpsertNode.Type.Relate)&&!(node.relation instanceof HasManyRelation)){node.upsertModel[node.modelClass.dbRefProp]=node.upsertModel.$values(node.relation.relatedProp.props);}}}},{key:'afterGraphInserterCreated',value:function afterGraphInserterCreated(builder,graphInserter){var _this3=this;var insertNodes=graphInserter.graph.nodes;var _loop=function _loop(i,l){var insertNode=insertNodes[i];var upsertNode=_this3.graph.nodesByUpsert.get(insertNode.model);if((!upsertNode||!upsertNode.hasType(UpsertNode.Type.Insert))&&!insertNode.handled){for(var d=0,ld=insertNode.isNeededBy.length;d<ld;++d){insertNode.isNeededBy[d].resolve(insertNode.model);}if(insertNode.parentNode){var parent=insertNode.parentNode;parent.manyToManyConnections=parent.manyToManyConnections.filter(function(conn){return conn.node!==insertNode;});}insertNode.markAsInserted();}};for(var i=0,l=insertNodes.length;i<l;++i){_loop(i,l);}}},{key:'onAfter2',value:function onAfter2(builder,result){var _this4=this;return this.relate(builder).then(function(){return _this4.update(builder);}).then(function(){return _this4.upsertRecursively(builder);}).then(function(){return _get(UpsertGraphOperation.prototype.__proto__||Object.getPrototypeOf(UpsertGraphOperation.prototype),'onAfter2',_this4).call(_this4,builder,result);});}},{key:'delete',value:function _delete(builder){return promiseUtils.map(this.graph.nodes,function(node){var relNames=Object.keys(node.relations);return promiseUtils.map(relNames,function(relName){var relation=node.modelClass.getRelation(relName);var nodes=node.relations[relName].filter(function(it){return it.hasType(UpsertNode.Type.Delete,UpsertNode.Type.Unrelate);});var ids=nodes.map(function(it){return it.currentModel.$id();});if(ids.length){var unrelate=nodes[0].hasType(UpsertNode.Type.Unrelate);var query=node.upsertModel.$relatedQuery(relName).childQueryOf(builder);if(!relation.isOneToOne()){query.whereInComposite(builder.fullIdColumnFor(relation.relatedModelClass),ids);}if(unrelate){query.unrelate();}else{query.delete();}return query;}},{concurrency:1});},{concurrency:this.graph.rootModelClass.getConcurrency(builder.unsafeKnex())});}},{key:'relate',value:function relate(builder){var relateNodes=this.graph.nodes.filter(function(it){return it.hasType(UpsertNode.Type.Relate)&&it.relation instanceof HasManyRelation;});return promiseUtils.map(relateNodes,function(node){return node.parentNode.upsertModel.$relatedQuery(node.relationName).childQueryOf(builder,{fork:true}).relate(node.upsertModel.$id());},{concurrency:this.graph.rootModelClass.getConcurrency(builder.unsafeKnex())});}},{key:'update',value:function update(builder){var updateNodes=this.graph.nodes.filter(function(it){return it.hasType(UpsertNode.Type.Update,UpsertNode.Type.Patch);});return promiseUtils.map(updateNodes,function(node){var query=null;var patch=node.hasType(UpsertNode.Type.Patch);node.upsertModel.$validate(node.upsertModel,{patch:patch,dataPath:node.dataPath});if(node.parentNode){query=node.parentNode.upsertModel.$relatedQuery(node.relationName).childQueryOf(builder,{fork:true}).findById(node.upsertModel.$id())[patch?'patch':'update'](node.upsertModel);}else{query=node.upsertModel.$query().childQueryOf(builder,{fork:true}).patch();}return query;},{concurrency:this.graph.rootModelClass.getConcurrency(builder.unsafeKnex())});}},{key:'upsertRecursively',value:function upsertRecursively(builder){var upsertRecursivelyNodes=this.graph.nodes.filter(function(it){return it.hasType(UpsertNode.Type.UpsertRecursively);});return promiseUtils.map(upsertRecursivelyNodes,function(node){return node.upsertModel.constructor.query().upsertGraph(node.upsertModel,transformOptionsFromPath(node.opt,node.relPathFromRoot)).childQueryOf(builder,{fork:true});},{concurrency:this.graph.rootModelClass.getConcurrency(builder.unsafeKnex())});}}]);return UpsertGraphOperation;}(InsertGraphOperation);module.exports=UpsertGraphOperation;