var promiseUtils=require('../../utils/promiseUtils');var _require=require('../../utils/objectUtils'),chunk=_require.chunk;var _require2=require('../../utils/knexUtils'),isPostgres=_require2.isPostgres;var POSTGRES_INSERT_BATCH_SIZE=100;module.exports=function(builder){var batchSize=isPostgres(builder.knex())?POSTGRES_INSERT_BATCH_SIZE:1;return function(tableInsertion){var inputs=[];var others=[];var queries=[];var insertQuery=tableInsertion.modelClass.query().childQueryOf(builder);var items=tableInsertion.items;for(var i=0,l=items.length;i<l;++i){var item=items[i];var model=item.model,relation=item.relation;var json=model.$validate(model,{dataPath:item.node.dataPath});model.$set(json);if(relation){others.push(model);}else{inputs.push(model);}}batchInsert(inputs,insertQuery.clone().copyFrom(builder,/returning/),batchSize,queries);batchInsert(others,insertQuery.clone(),batchSize,queries);return promiseUtils.map(queries,function(query){return query.query;},{concurrency:tableInsertion.modelClass.getConcurrency(builder.unsafeKnex())});};};function batchInsert(models,queryBuilder,batchSize,queries){var batches=chunk(models,batchSize);for(var i=0,l=batches.length;i<l;++i){queries.push({query:queryBuilder.clone().insert(batches[i])});}}